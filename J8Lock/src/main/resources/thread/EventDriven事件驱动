
event.driven包下
sync包里的类与接口暂时实现简单的事件驱动设计模式，是一个同步的EDA框架设计


首先看事件驱动模式三个点：
首先是事件Event,也就是事件的类型以及携带的数据,也可以理解为如何产生事件
然后是事件Handler,也就是处理,事件产生之后需要处理
最后是事件Dispatch,事件分发,事件中有特定的类型,根据不同的类型选择不同的事件处理Handler

看Driven包下：
Message可以说是事件Event的接口,类Event就是事件的实现,里面只返回了类型

Channel是事件处理的接口,具体实现类在EventDispatcherExample下的静态内部类InputEventHandler和ResultEventHandler.只有一个dispatch方法可以说就是事件的处理过程

DynamicRouter是事件Dispatch的接口,具体实现类是EventDispathcer,里面一个是注册Channel的方法,另一个就是根据事件类型分发事件,选择不同的事件处理Handler.

这就是一个简单的事件驱动设计,但是是一个同步的.
在EventDispatcher下的map不是线程安全的,而且不能并发处理Message消息.只能一个一个消费.出现积压.所以需要改进设计一个异步EDA框架设计


