
是一种带有平衡属性的二叉查找树，二叉搜索树，BST。

特点：二叉查找树以及某个结点的左右子树高度的绝对值不超过1，即0，1，-1

因为AVL树是一种平衡树，所以每次增加或者减少树中的元素都有可能使这棵树由平衡变得不平衡，
所以我们需要一种机制来检测这棵树是否平衡，以及当它不平衡的时候，我们应该通过某些操作使它重新平衡(rebalanced)。

通过确定平衡因子(即高度差,一般是左边子树高度减去右边子树高度),然后确定是左旋还是右旋来重新达到平衡,但是有可能是多次左旋或者右旋才能达到平衡

一般会有四种情况出现,然后需要进行旋转.就是如果出现LL型或者RR型的情况时,只需单次旋转就可以达到平衡.但是出现LR型或者RL型时,就需要双次旋转(两次)才能达到平衡

在插入一个节点后应该沿搜索路径将路径上的节点平衡因子进行修改，当平衡因子大于1时，就需要进行平衡化处理。从发生不平衡的结点起，沿刚才回溯的路径取直接下两层的结点，如果这三个节点在一条直线上，则采用单旋转进行平衡化，如果这三个结点位于一条直线上，则采用双旋转进行平衡化。

这里解释LL或RR,LR或RL型出现的情况

插入一个节点之后,导致某个节点的平衡因子不是0,1,-1了,就出现失衡.一般平衡因子都是2或者-2了.然后出现的顺序是失衡节点->子节点->插入节点这样的一个顺序.可以自己画图了解
然后子节点是失衡节点的左子节点,那么插入节点如果是子节点的左子节点,这种情况就是LL.
然后子节点是失衡节点的右子节点,那么插入节点如果是子节点的右子节点,这种情况就是RR.
然后子节点是失衡节点的左子节点,那么插入节点如果是子节点的右子节点,这种情况是LR.
然后子节点是失衡节点的右子节点,那么插入节点如果是子节点的左子节点,这种情况是RL.

当是RR或者LL的时候,如何确定旋转方式呢,是左旋还是右旋呢?
这个时候需要确定平衡因子的正负了,最通俗就是那边的高度低就选什么旋转.例如平衡因子是整数2,那么代表左边子树高,右边子树低,那就右旋转.平衡因子是负数,那么代表右边子树高,左边子树低,就左旋转

当是LR或者RL的时候，如果是LR需要先左旋转成LL，然后再右旋就达到平衡。是RL时，先右旋转成RR，然后再左旋就打到平衡。具体可以看addNodeInternal的代码实现




